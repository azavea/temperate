# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2018-02-01 18:58
from __future__ import unicode_literals

from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations
from django.db.utils import IntegrityError


def migrate_weather_event_rank_data_to_orgs(apps, schema_editor):
    OrganizationWeatherEvent = apps.get_model('planit_data', 'OrganizationWeatherEvent')
    Organization = apps.get_model('users', 'PlanItOrganization')

    for org in Organization.objects.all():
        for weather_event_rank in org.weather_events.all():
            try:
                OrganizationWeatherEvent.objects.get(organization=org,
                                                     weather_event=weather_event_rank.weather_event,
                                                     order=weather_event_rank.order)
            except OrganizationWeatherEvent.DoesNotExist:
                org_we = OrganizationWeatherEvent(organization=org,
                                                  weather_event=weather_event_rank.weather_event,
                                                  order=weather_event_rank.order)
                org_we.save()


def revert_migrate(apps, schema_editor):
    """Re-associate Organizations with the default WeatherEventRanks when going backwards.

    This reverse migration has the potential to lose data in any of the following cases:
    - The order field changed on a OrganizationWeatherEvent object derived from WeatherEventRank
    - An organization does not have a PlanItLocation.point associated with it
    - No default WeatherEventRank can be found for a given combination of GeoRegion + WeatherEvent

    """
    GeoRegion = apps.get_model('planit_data', 'GeoRegion')
    OrganizationWeatherEvent = apps.get_model('planit_data', 'OrganizationWeatherEvent')
    WeatherEventRank = apps.get_model('planit_data', 'WeatherEventRank')

    for org_we in OrganizationWeatherEvent.objects.all():
        org = org_we.organization
        if org.location is None or org.location.point is None:
            continue
        try:
            georegion = GeoRegion.objects.get(geom__intersects=org.location.point)
            weather_event_rank = WeatherEventRank.objects.get(georegion=georegion,
                                                              weather_event=org_we.weather_event)
        except ObjectDoesNotExist:
            continue
        org.weather_events.add(weather_event_rank)


class Migration(migrations.Migration):

    dependencies = [
        ('planit_data', '0022_add_org_weather_event'),
    ]

    operations = [
        migrations.RunPython(migrate_weather_event_rank_data_to_orgs, revert_migrate)
    ]
